@page "/teploteh2"
@using buildlib;
@using BuildInfo.Properties;
@using System.Linq;

<PageTitle>Теплотехнический расчет</PageTitle>
<h3>Теплотехнический расчет ограждающих конструкций</h3>

<h4>Исходные данные</h4>
<p>Расчет выполняется на основании нормативной документации:</p>
<p> - СП 50.13330.2012 "Тепловая защита зданий"</p>
<p> - СП 131.13330.2020 "Строительная климатология"</p>

<div class="profinfo">
    <div class="profinfo2"><label>Температура внутреннего воздуха, &#176С</label></div>
        <div class="profinfo2"><input @bind="Tinside" /></div>
        <div class="profinfo2"><label>Влажность внутреннего воздуха, %</label> </div>
        <div class="profinfo2"><input @bind="Winside" /></div>
        <div class="profinfo2"><label>Назначение здания или помещения</label></div>
        <div class="profinfo2">
            <select class="cl_select00" @bind="selectedTypeBuilding">
                <option>Жилые </option>
                <option>Лечебно-профилактические и детские учреждения</option>
                <option>Школы, интернаты, гостиницы и общежития</option>
                <option>Общественные,кроме указанных выше</option>
                <option>Административные и бытовые</option>
                <option>Производственные и другие здания и помещения с влажным или мокрым режимом</option>
                <option>Производственные с сухим и нормальным режимами *</option>
            </select>
        </div>
        <div class="profinfo2"><label>Район строительства</label></div>
        <div class="profinfo2">
            <select class="cl_select00" @onchange="loadRegionslist">
                @foreach (var template1 in regionList)
                {
                    <option value=@template1>@template1</option>
                }
            </select>
        </div>
        <div class="profinfo2"><label>Зона влажности</label></div>
        <div class="profinfo2">
            <select class="cl_select00" @bind="WaterZone">
                <option>сухая</option>
                <option>нормальная</option>
                <option>влажная</option>
            </select>
        </div>
        <div class="profinfo2"><label>Тип поверхности:</label></div>
        <div class="profinfo2">
        <select class="cl_select00" @bind="TypeSurface">
                <option> Стены</option>
                <option>Покрытия и перекрытия над проездами</option>
                <option>Перекрытия чердачные над неотапливаемыми подпольями и подвалами</option>
            </select>
        </div>
        <div>Коэффициент теплотехнической однородности</div>
        <div><input @bind="Kodnorod" /></div>
        <div class="profinfo2"><label>Отапливаемый объем здания, м3</label></div>
        <div class="profinfo2"><input @bind="BuildingVolume" /></div>


    <p>
        <a href="energy" target="_blank"> Расчет значения удельной характеристики расхода тепловой энергии на отопление и вентиляцию здания</a>
    </p>



</div>
           
<p></p>
<button class="mainbottom" @onclick="MainCalc">Вычислить</button>
<p></p>

<p>Состав ограждающей конструкции:</p>
<p></p>

<div id="tableaddmaterial">
    <div> <label>Материал:</label></div>
    <div>
        <select class="cl_select00" @onchange="loadNmaterial">
            @foreach (var template1 in listNmaterial)
            {
                <option value=@template1>@template1</option>
            }
        </select>
    </div>
    <div> <input input id="input02" size="4" @bind="newThickness" /></div>
    <div><button class="mainbottom" @onclick="addMaterial">Добавить</button></div>
    <div> <button class="mainbottom" @onclick="deleteMaterial">Удалить</button></div>
</div>

   <ul>
        @foreach (var newM in KitMaterial)
        {
            <li>
                <div id="tablekitmaterial">
                    <div><input type="checkbox" @bind="newM.IsDone"/></div>
                    <div> <input id="input01" @bind="newM.Name" /> </div>
                    <div><input id="input02" size="4" @bind="newM.gammaA" /></div>
                    <div> <input id="input02" size="4" @bind="newM.gammaB" /></div>
                    <div> <input id ="input02" size="4" @bind="newM.Thickness" /></div>
                </div>
            </li>
        }
   </ul>
<input @bind="Summ" />


<h4>Результаты расчета</h4>

<div class="rezulttable">
    <div class="profinfo2"><label>Влажностный режим помещения (табл. 1 СП)</label></div>
    <div class="profinfo2"><label>@WaterMode</label></div>
    <div class="profinfo2"><label>Условия эксплуатации ограждающих конструкций (табл. 2 СП)</label> </div>
    <div class="profinfo2"><label>@ExpZone</label></div>
    <div class="profinfo2"><label>Зона влажности (прил. В СП)</label> </div>
    <div class="profinfo2"><label>@WaterZone</label></div>
    <div class="profinfo2"><label>Назначение здания или помещения</label> </div>
    <div class="profinfo2"><label>@selectedTypeBuilding</label></div>
    <div class="profinfo2"><label>Район строительства</label> </div>
    <div class="profinfo2"><label>@selectedRegion</label></div>
    <div class="profinfo2"><label>Температура отопительного периода &#176С</label> </div>
    <div class="profinfo2"><label>@Tot</label></div>
    <div class="profinfo2"><label>Продолжительность отопительного периода, сут</label> </div>
    <div class="profinfo2"><label>@Zot</label></div>
    <div class="profinfo2"><label>ГСОП</label> </div>
    <div class="profinfo2"><label>@GSOP</label></div>
    <div class="profinfo2"><label>Требуемое сопротивление теплопередаче</label> </div>
    <div class="profinfo2"><label>@Rtr</label></div>
</div>

@code {
    #region ПЕРЕМЕННЫЕ
    private double Tinside = 0;
    private int Winside=0;
    private string? WaterMode;
    private string? WaterZone;                //зона влажности по карте (приложение В)
    private string? ExpZone;                  // А или Б
    private string? selectedTypeBuilding;
    private string? selectedRegion;           //регион строительства
    private double Tot;                      //температура отопительного периода
    private double Zot;                      //продолжительность отопительного периода
    private double GSOP;
    private int indexNumb;
    BuildProfile buildProfile = new ();
    List<string> regionList = new();
    List<string> TotList = new();
    List<string> ZotList = new();
    List<string> listNmaterial = new();
    List<string> listGammaA = new();
    List<string> listGammaB = new();
    private string? selectedNmaterial;
    private string? selectedGammaA;
    private string? selectedGammaB;
    List<Material> KitMaterial = new();
    private string? newNameMaterial;
    private string? newGammaA;
    private string? newGammaB;
    private string? newThickness;
    private int Summ=0;
    private string TypeSurface;
    private double Rtr;
    private double BuildingVolume;
    private double Ktr;
    private double Ktr55;
    private double Ktr56;
    private double Kodnorod;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        regionList = buildProfile.listFromFile((string)buildProfile.Region, 0);
        TotList = buildProfile.listFromFile((string)buildProfile.Region, 11);
        ZotList = buildProfile.listFromFile((string)buildProfile.Region, 10);
        listNmaterial = buildProfile.listFromFileSpliteLine((string)buildProfile.Nmaterial, 0);
        listGammaA = buildProfile.listFromFileSpliteLine((string)buildProfile.Nmaterial, 1);
        listGammaB = buildProfile.listFromFileSpliteLine((string)buildProfile.Nmaterial, 2);
    }

    private void MainCalc()
    {
        CalcWaterMode();
        calcUslExplAB();
        calcGSOP();
        calcRtr();
    }

    private double calcGSOP() => GSOP = Math.Round((Tinside - Tot) * Zot, 2, MidpointRounding.AwayFromZero);

    private void loadRegionslist(ChangeEventArgs e)
    {
        selectedRegion = e.Value.ToString();
        for (int i = 0; i <= regionList.Count - 1; i++)
        {
            if (selectedRegion == regionList[i])
            {
                indexNumb = i;
            }
        }
        Tot =Convert.ToDouble(TotList[indexNumb]);
        Zot =Convert.ToDouble(ZotList[indexNumb]);
    }

    private void loadNmaterial(ChangeEventArgs e)
    {
        selectedNmaterial = e.Value.ToString();
        for (int i = 0; i <= listNmaterial.Count - 1; i++)
        {
            if (selectedNmaterial == listNmaterial[i])
            {
                indexNumb = i;
            }
        }
        selectedGammaA = listGammaA[indexNumb];
        selectedGammaB = listGammaB[indexNumb];
    }

    private void addMaterial()
    {
        KitMaterial.Add(new Material
        {
            Name = selectedNmaterial,
            gammaA = selectedGammaA,
            gammaB = selectedGammaB,
            Thickness = newThickness
        });
        newThickness = string.Empty;
        newGammaA = string.Empty;
        newGammaB = string.Empty;
        SumThickness();
    }

    public class Material
    {
        public string? Name { get; set; }
        public string? gammaA { get; set; }
        public string? gammaB { get; set; }
        public string? Thickness { get; set; }
        public bool IsDone { get; set; }
    }

    private void CalcExpZone(ChangeEventArgs e)
    {

    }

    private void CalcWaterMode()
    {
        if (Tinside < 12)
        {
            if (Winside < 60) { WaterMode = "сухой"; }
            if (Winside >= 60 && Winside <= 75) { WaterMode = "нормальный"; }
            if (Winside > 75) { WaterMode = "влажный"; }
        }
        if (Tinside >= 12 && Tinside <=24)
        {
            if (Winside < 50) { WaterMode = "сухой"; }
            if (Winside >= 50 && Winside <= 60) { WaterMode = "нормальный"; }
            if (Winside > 60 && Winside <= 75) { WaterMode = "влажный"; }
            if (Winside > 75) { WaterMode = "мокрый"; }
        }
        if (Tinside > 24 )
        {
            if (Winside < 40) { WaterMode = "сухой"; }
            if (Winside >= 40 && Winside <= 50) { WaterMode = "нормальный"; }
            if (Winside > 50 && Winside <= 60) { WaterMode = "влажный"; }
            if (Winside > 60) { WaterMode = "мокрый"; }
        }
    }
    private void calcUslExplAB()
    {
        if (WaterMode == "сухой")
        {
            if (WaterZone == "сухая" || WaterZone == "нормальная") { ExpZone = "А";}
            if (WaterZone == "влажная") { ExpZone = "Б"; }
        }
        if (WaterMode == "нормальный")
        {
            if (WaterZone == "сухая") { ExpZone = "А"; }
            if (WaterZone == "нормальная" || WaterZone == "влажная") { ExpZone = "Б"; }
        }
        if (WaterMode == "влажный" || WaterMode == "мокрый")
        {
            ExpZone = "Б";
        }
    }



    private void SumThickness() {
        try
        {
            Summ = KitMaterial.Sum(x => Convert.ToInt16(x.Thickness));
        }
        catch
        {
            
        }
    }

    private void deleteMaterial()
    {
        for (int i = 0; i < KitMaterial.Count; i++)
        {
            if (KitMaterial[i].IsDone == true)
            {
                KitMaterial.Remove(KitMaterial[i]);
            }
        }
        SumThickness();
    }

    private void calcRtr()
    {
        if (selectedTypeBuilding == "Жилые" || selectedTypeBuilding == "Лечебно-профилактические и детские учреждения" || selectedTypeBuilding == "Школы, интернаты, гостиницы и общежития")
        {
            if (TypeSurface == "Стены")
            {
                Rtr = 0.00035 * GSOP + 1.4;
            }
            if (TypeSurface == "Покрытия и перекрытия над проездами")
            {
                Rtr = 0.0005 * GSOP + 2.2;
            }
            if (TypeSurface == "Перекрытия чердачные над неотапливаемыми подпольями и подвалами")
            {
                Rtr = 0.00045 * GSOP + 1.9;
            }
            if (TypeSurface == "Окна и балконные двери, витрины и витражи")
            {
                double[,] nums2 = { { 2000, 0.3 }, { 4000, 0.45 }, { 6000, 0.6 }, { 8000, 0.7 }, { 10000, 0.75 }, { 12000, 8 } };
                for (int i =1; i < nums2.Length/2;i++)
                {
                    if (nums2 [i, 0] < GSOP)
                    {
                        Rtr = nums2[i-1, 1] + (GSOP - nums2[i - 1, 0]) / (nums2[i, 0] - nums2[i - 1, 0]) * (nums2[i, 1] - nums2[i-1, 1]);
                    }
                }
            }
            if (TypeSurface == "Фонари")
            {
                Rtr = 0.000025 * GSOP + 0.25;
            }
        }
        if (selectedTypeBuilding == "Общественные,кроме указанных выше" || selectedTypeBuilding == "Административные и бытовые" || selectedTypeBuilding == "Производственные и другие здания и помещения с влажным или мокрым режимом")
        {
            if (TypeSurface == "Стены")
            {
                Rtr = 0.0003 * GSOP + 1.2;
            }
            if (TypeSurface == "Покрытия и перекрытия над проездами")
            {
                Rtr = 0.0004 * GSOP + 1.6;
            }
            if (TypeSurface == "Перекрытия чердачные над неотапливаемыми подпольями и подвалами")
            {
                Rtr = 0.00035 * GSOP + 1.3;
            }
            if (TypeSurface == "Окна и балконные двери, витрины и витражи")
            {
                Rtr = 0.00005 * GSOP + 0.2;
            }
            if (TypeSurface == "Фонари")
            {
                Rtr = 0.000025 * GSOP + 0.25;
            }
        }
        if (selectedTypeBuilding == "Производственные с сухим и нормальным режимами *")
        {
            if (TypeSurface == "Стены")
            {
                Rtr = 0.0002 * GSOP + 1.0;
            }
            if (TypeSurface == "Покрытия и перекрытия над проездами")
            {
                Rtr = 0.00025 * GSOP + 1.5;
            }
            if (TypeSurface == "Перекрытия чердачные над неотапливаемыми подпольями и подвалами")
            {
                Rtr = 0.0002 * GSOP + 1.0;
            }
            if (TypeSurface == "Окна и балконные двери, витрины и витражи")
            {
                Rtr = 0.000025 * GSOP + 0.2;
            }
            if (TypeSurface == "Фонари")
            {
                Rtr = 0.000025 * GSOP + 0.15;
            }
        }
    }

    private void calcKtr() // Нормируемое значение удельной теплозащитной характеристики здания
    {
        if (BuildingVolume <= 960)
        {
            Ktr55 = (4.74 / (0.00013 * GSOP + 0.61)) * (1 / Math.Cbrt(BuildingVolume));
        }
        if (BuildingVolume > 960)
        {
            Ktr55 = (0.16+10/Math.Sqrt(BuildingVolume)) / (0.00013 * GSOP + 0.61);
        }

        Ktr56 = 8.5 / Math.Sqrt(GSOP);

        if (Ktr55 < Ktr56)
        {
            Ktr = Ktr56;
        }
        else
        {
            Ktr = Ktr55;
        }
    }





}
